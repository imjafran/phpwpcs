name: 'PHPWPCS'
description: 'WordPress Coding Standards checker with PHP Compatibility'
author: 'imjafran'

branding:
  icon: 'check-circle'
  color: 'blue'

inputs:
  paths:
    description: 'Paths to check'
    required: false
    default: '.'
  
  standards:
    description: 'PHPCS standards (WordPress,WordPress-Core,WordPress-Extra,PHPCompatibility)'
    required: false
    default: 'WordPress,PHPCompatibility'
  
  php-version:
    description: 'PHP version (7.4-8.3)'
    required: false
    default: '8.0'
  
  min-php-version:
    description: 'Minimum PHP version for compatibility'
    required: false
    default: '7.4'
  
  max-php-version:
    description: 'Maximum PHP version for compatibility'
    required: false
    default: '8.3'
  
  config-url:
    description: 'Custom phpcs.xml URL'
    required: false
    default: ''
  
  fail-on:
    description: 'Fail on (error, warning, never)'
    required: false
    default: 'error'
  
  ignore-patterns:
    description: 'Patterns to ignore'
    required: false
    default: 'vendor/*,node_modules/*,build/*,dist/*'

outputs:
  violations:
    description: 'Total violations'
  errors:
    description: 'Error count'
  warnings:
    description: 'Warning count'
  files:
    description: 'Files checked'

runs:
  using: 'composite'
  steps:
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ inputs.php-version }}
        tools: composer:v2
        coverage: none
    
    - name: Setup WPCS
      shell: bash
      run: ${{ github.action_path }}/scripts/setup.sh
      env:
        STANDARDS: ${{ inputs.standards }}
        MIN_PHP: ${{ inputs.min-php-version }}
        MAX_PHP: ${{ inputs.max-php-version }}
    
    - name: Prepare Config
      shell: bash
      run: |
        rm -f composer.json composer.lock
        
        if [ -f phpcs.xml ]; then
          echo "üìã Using existing phpcs.xml"
        elif [ -n "${{ inputs.config-url }}" ]; then
          echo "üì• Downloading custom config from ${{ inputs.config-url }}"
          if curl -sL "${{ inputs.config-url }}" -o phpcs.xml; then
            echo "‚úÖ Custom config downloaded successfully"
          else
            echo "‚ö†Ô∏è Failed to download custom config, using default"
            cp ${{ github.action_path }}/data/phpcs.xml phpcs.xml
          fi
                  else
            echo "üìã Using default phpcs.xml configuration"
            cp ${{ github.action_path }}/data/phpcs.xml phpcs.xml
          fi
        
        # Update PHP version in config if PHPCompatibility is present
        if grep -q "PHPCompatibility" phpcs.xml; then
          echo "üîß Updating PHP version range in config"
          sed -i "s/testVersion\" value=\"[^\"]*\"/testVersion\" value=\"${{ inputs.min-php-version }}-${{ inputs.max-php-version }}\"/" phpcs.xml
        fi
    
    - name: Run Checks
      shell: bash
      run: ${{ github.action_path }}/scripts/run-checks.sh
      env:
        PATHS: ${{ inputs.paths }}
        STANDARDS: ${{ inputs.standards }}
        IGNORE: ${{ inputs.ignore-patterns }}
        FAIL_ON: ${{ inputs.fail-on }}
